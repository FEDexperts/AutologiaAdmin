//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutologiaDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class autologiaEntities : DbContext
    {
        public autologiaEntities()
            : base("name=autologiaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CarMainType> CarMainType { get; set; }
        public virtual DbSet<CarManufactors> CarManufactors { get; set; }
        public virtual DbSet<CarModel> CarModel { get; set; }
        public virtual DbSet<Cars> Cars { get; set; }
        public virtual DbSet<CarSubModel> CarSubModel { get; set; }
        public virtual DbSet<CarSubType> CarSubType { get; set; }
        public virtual DbSet<LookupDetails> LookupDetails { get; set; }
        public virtual DbSet<MainLookup> MainLookup { get; set; }
        public virtual DbSet<MandatoryQuestions> MandatoryQuestions { get; set; }
        public virtual DbSet<Points> Points { get; set; }
        public virtual DbSet<QuestionsAnswers> QuestionsAnswers { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<AdminUsers> AdminUsers { get; set; }
        public virtual DbSet<Answers> Answers { get; set; }
        public virtual DbSet<CarMultiAnswer> CarMultiAnswer { get; set; }
        public virtual DbSet<CarsEx> CarsEx { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<Questions> Questions { get; set; }
    
        public virtual int spAddCarsEx(string keys, Nullable<int> listId, Nullable<int> carId)
        {
            var keysParameter = keys != null ?
                new ObjectParameter("keys", keys) :
                new ObjectParameter("keys", typeof(string));
    
            var listIdParameter = listId.HasValue ?
                new ObjectParameter("listId", listId) :
                new ObjectParameter("listId", typeof(int));
    
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddCarsEx", keysParameter, listIdParameter, carIdParameter);
        }
    
        public virtual int spAddMainType(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddMainType", valueParameter);
        }
    
        public virtual int spAddManufactur(string nAME, string lOGO, string lINK)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var lOGOParameter = lOGO != null ?
                new ObjectParameter("LOGO", lOGO) :
                new ObjectParameter("LOGO", typeof(string));
    
            var lINKParameter = lINK != null ?
                new ObjectParameter("LINK", lINK) :
                new ObjectParameter("LINK", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddManufactur", nAMEParameter, lOGOParameter, lINKParameter);
        }
    
        public virtual int spAddModel(Nullable<int> mANUFACTOR_ID, string nAME, string iMAGE)
        {
            var mANUFACTOR_IDParameter = mANUFACTOR_ID.HasValue ?
                new ObjectParameter("MANUFACTOR_ID", mANUFACTOR_ID) :
                new ObjectParameter("MANUFACTOR_ID", typeof(int));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var iMAGEParameter = iMAGE != null ?
                new ObjectParameter("IMAGE", iMAGE) :
                new ObjectParameter("IMAGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddModel", mANUFACTOR_IDParameter, nAMEParameter, iMAGEParameter);
        }
    
        public virtual int spAddMySearch(Nullable<int> userId, string searchData)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var searchDataParameter = searchData != null ?
                new ObjectParameter("searchData", searchData) :
                new ObjectParameter("searchData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddMySearch", userIdParameter, searchDataParameter);
        }
    
        public virtual int spAddSearch(Nullable<int> userId, string searchData)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var searchDataParameter = searchData != null ?
                new ObjectParameter("searchData", searchData) :
                new ObjectParameter("searchData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSearch", userIdParameter, searchDataParameter);
        }
    
        public virtual int spAddSubModel(Nullable<int> mANUFACTOR_ID, Nullable<int> mODEL_ID, string nAME, string sMALL_IMAGE, string bIG_IMAGE)
        {
            var mANUFACTOR_IDParameter = mANUFACTOR_ID.HasValue ?
                new ObjectParameter("MANUFACTOR_ID", mANUFACTOR_ID) :
                new ObjectParameter("MANUFACTOR_ID", typeof(int));
    
            var mODEL_IDParameter = mODEL_ID.HasValue ?
                new ObjectParameter("MODEL_ID", mODEL_ID) :
                new ObjectParameter("MODEL_ID", typeof(int));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var sMALL_IMAGEParameter = sMALL_IMAGE != null ?
                new ObjectParameter("SMALL_IMAGE", sMALL_IMAGE) :
                new ObjectParameter("SMALL_IMAGE", typeof(string));
    
            var bIG_IMAGEParameter = bIG_IMAGE != null ?
                new ObjectParameter("BIG_IMAGE", bIG_IMAGE) :
                new ObjectParameter("BIG_IMAGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSubModel", mANUFACTOR_IDParameter, mODEL_IDParameter, nAMEParameter, sMALL_IMAGEParameter, bIG_IMAGEParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAddUser(string email, string password, string firstName, string lastName, ObjectParameter iD)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAddUser", emailParameter, passwordParameter, firstNameParameter, lastNameParameter, iD);
        }
    
        public virtual int spDeleteCar(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteCar", idParameter);
        }
    
        public virtual int spDeleteLookups(Nullable<int> mainLookup)
        {
            var mainLookupParameter = mainLookup.HasValue ?
                new ObjectParameter("MainLookup", mainLookup) :
                new ObjectParameter("MainLookup", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteLookups", mainLookupParameter);
        }
    
        public virtual int spDeleteMainTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteMainTypes");
        }
    
        public virtual int spDeleteManufactor(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteManufactor", iDParameter);
        }
    
        public virtual int spDeleteManufactures()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteManufactures");
        }
    
        public virtual int spDeleteModel(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteModel", idParameter);
        }
    
        public virtual int spDeleteModels(Nullable<int> manufactorId)
        {
            var manufactorIdParameter = manufactorId.HasValue ?
                new ObjectParameter("ManufactorId", manufactorId) :
                new ObjectParameter("ManufactorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteModels", manufactorIdParameter);
        }
    
        public virtual int spDeleteSearch(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSearch", idParameter);
        }
    
        public virtual int spDeleteSubModel(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSubModel", iDParameter);
        }
    
        public virtual int spDeleteSubModels(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSubModels", iDParameter);
        }
    
        public virtual ObjectResult<string> spForgotPassword(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spForgotPassword", emailParameter);
        }
    
        public virtual ObjectResult<spGetAdminUser_Result> spGetAdminUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdminUser_Result>("spGetAdminUser", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spGetAllCars_Result> spGetAllCars()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCars_Result>("spGetAllCars");
        }
    
        public virtual ObjectResult<spGetCars_Result> spGetCars(Nullable<int> manufactor, Nullable<int> model, Nullable<int> subModel, Nullable<int> mainType, Nullable<int> subType, Nullable<int> year)
        {
            var manufactorParameter = manufactor.HasValue ?
                new ObjectParameter("manufactor", manufactor) :
                new ObjectParameter("manufactor", typeof(int));
    
            var modelParameter = model.HasValue ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(int));
    
            var subModelParameter = subModel.HasValue ?
                new ObjectParameter("subModel", subModel) :
                new ObjectParameter("subModel", typeof(int));
    
            var mainTypeParameter = mainType.HasValue ?
                new ObjectParameter("mainType", mainType) :
                new ObjectParameter("mainType", typeof(int));
    
            var subTypeParameter = subType.HasValue ?
                new ObjectParameter("subType", subType) :
                new ObjectParameter("subType", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCars_Result>("spGetCars", manufactorParameter, modelParameter, subModelParameter, mainTypeParameter, subTypeParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetCars_old_Result> spGetCars_old()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCars_old_Result>("spGetCars_old");
        }
    
        public virtual int spGetCarsExAsString()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCarsExAsString");
        }
    
        public virtual ObjectResult<spGetLookupDetailItem_Result> spGetLookupDetailItem(Nullable<int> mainId, Nullable<int> id)
        {
            var mainIdParameter = mainId.HasValue ?
                new ObjectParameter("mainId", mainId) :
                new ObjectParameter("mainId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLookupDetailItem_Result>("spGetLookupDetailItem", mainIdParameter, idParameter);
        }
    
        public virtual ObjectResult<spGetlookupDetails_Result> spGetlookupDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetlookupDetails_Result>("spGetlookupDetails", idParameter);
        }
    
        public virtual ObjectResult<spGetLookupItem_Result> spGetLookupItem(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLookupItem_Result>("spGetLookupItem", idParameter);
        }
    
        public virtual ObjectResult<spGetLookups_Result> spGetLookups(Nullable<int> menuRef)
        {
            var menuRefParameter = menuRef.HasValue ?
                new ObjectParameter("menuRef", menuRef) :
                new ObjectParameter("menuRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLookups_Result>("spGetLookups", menuRefParameter);
        }
    
        public virtual ObjectResult<string> spGetMainLookupManual(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetMainLookupManual", idParameter);
        }
    
        public virtual ObjectResult<string> spGetMainLookupValuesManual(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetMainLookupValuesManual", idParameter);
        }
    
        public virtual ObjectResult<spGetMainTypes_Result> spGetMainTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMainTypes_Result>("spGetMainTypes");
        }
    
        public virtual ObjectResult<spGetManufactures_Result> spGetManufactures()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetManufactures_Result>("spGetManufactures");
        }
    
        public virtual ObjectResult<spGetMenu_Result> spGetMenu(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMenu_Result>("spGetMenu", iDParameter);
        }
    
        public virtual ObjectResult<spGetMenus_Result> spGetMenus(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMenus_Result>("spGetMenus", parentIdParameter);
        }
    
        public virtual ObjectResult<spGetModels_Result> spGetModels(Nullable<int> manufactorId)
        {
            var manufactorIdParameter = manufactorId.HasValue ?
                new ObjectParameter("ManufactorId", manufactorId) :
                new ObjectParameter("ManufactorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetModels_Result>("spGetModels", manufactorIdParameter);
        }
    
        public virtual int spGetMySearches(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetMySearches", userIdParameter);
        }
    
        public virtual ObjectResult<spGetSubModels_Result> spGetSubModels(Nullable<int> manufactorId, Nullable<int> modelId)
        {
            var manufactorIdParameter = manufactorId.HasValue ?
                new ObjectParameter("ManufactorId", manufactorId) :
                new ObjectParameter("ManufactorId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubModels_Result>("spGetSubModels", manufactorIdParameter, modelIdParameter);
        }
    
        public virtual ObjectResult<spGetSubType_Result> spGetSubType(Nullable<int> mainId)
        {
            var mainIdParameter = mainId.HasValue ?
                new ObjectParameter("MainId", mainId) :
                new ObjectParameter("MainId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubType_Result>("spGetSubType", mainIdParameter);
        }
    
        public virtual ObjectResult<spGetSubTypes_Result> spGetSubTypes(Nullable<int> mainId)
        {
            var mainIdParameter = mainId.HasValue ?
                new ObjectParameter("MainId", mainId) :
                new ObjectParameter("MainId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubTypes_Result>("spGetSubTypes", mainIdParameter);
        }
    
        public virtual ObjectResult<spGetUser_Result> spGetUser(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUser_Result>("spGetUser", emailParameter, passwordParameter);
        }
    
        public virtual int spSaveManual(Nullable<int> menuId, string manual)
        {
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(int));
    
            var manualParameter = manual != null ?
                new ObjectParameter("Manual", manual) :
                new ObjectParameter("Manual", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveManual", menuIdParameter, manualParameter);
        }
    
        public virtual int spSaveSummeryEdit(Nullable<int> menuId, Nullable<bool> summeryEdit)
        {
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(int));
    
            var summeryEditParameter = summeryEdit.HasValue ?
                new ObjectParameter("SummeryEdit", summeryEdit) :
                new ObjectParameter("SummeryEdit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveSummeryEdit", menuIdParameter, summeryEditParameter);
        }
    
        public virtual int spUpdateMainLookupManual(Nullable<int> id, string manual)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var manualParameter = manual != null ?
                new ObjectParameter("manual", manual) :
                new ObjectParameter("manual", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMainLookupManual", idParameter, manualParameter);
        }
    
        public virtual int spUpdateMainLookupValuesManual(Nullable<int> id, string manual)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var manualParameter = manual != null ?
                new ObjectParameter("manual", manual) :
                new ObjectParameter("manual", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMainLookupValuesManual", idParameter, manualParameter);
        }
    
        public virtual int spUpdateManufactorLink(Nullable<int> iD, string lINK)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var lINKParameter = lINK != null ?
                new ObjectParameter("LINK", lINK) :
                new ObjectParameter("LINK", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateManufactorLink", iDParameter, lINKParameter);
        }
    
        public virtual int spUpdateManufactur(Nullable<int> iD, string nAME, string lINK, string iMAGE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var lINKParameter = lINK != null ?
                new ObjectParameter("LINK", lINK) :
                new ObjectParameter("LINK", typeof(string));
    
            var iMAGEParameter = iMAGE != null ?
                new ObjectParameter("IMAGE", iMAGE) :
                new ObjectParameter("IMAGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateManufactur", iDParameter, nAMEParameter, lINKParameter, iMAGEParameter);
        }
    
        public virtual int spUpdatePrice(Nullable<int> id, Nullable<int> price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePrice", idParameter, priceParameter);
        }
    
        public virtual int spUpdateSubModel(Nullable<int> iD, string nAME, string sMALL_IMAGE, string bIG_IMAGE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var sMALL_IMAGEParameter = sMALL_IMAGE != null ?
                new ObjectParameter("SMALL_IMAGE", sMALL_IMAGE) :
                new ObjectParameter("SMALL_IMAGE", typeof(string));
    
            var bIG_IMAGEParameter = bIG_IMAGE != null ?
                new ObjectParameter("BIG_IMAGE", bIG_IMAGE) :
                new ObjectParameter("BIG_IMAGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSubModel", iDParameter, nAMEParameter, sMALL_IMAGEParameter, bIG_IMAGEParameter);
        }
    }
}
